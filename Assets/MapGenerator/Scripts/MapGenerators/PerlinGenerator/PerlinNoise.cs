using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace HexaMap
{
    /// <summary>
    /// Contains methods related to Perlin noise. 
    /// </summary>
    public static class PerlinNoise
    {
        /// <summary>
        /// Returns a 2-dimensional array of noise values picked randomly 
        /// from a noisemap generated by the given parameters.
        /// </summary>
        /// <param name="mapWidth">The array width.</param>
        /// <param name="mapHeight">The array height.</param>
        /// <param name="scale">The scale of the noise.</param>
        /// <param name="noiseMapScale">The noise map scale factor.</param>
        /// <returns>2-dimensional array of noise values</returns>
        public static float[,] MakeNoiseMap(int mapWidth, int mapHeight, float scale, float noiseMapScale)
        {
            if (noiseMapScale < 1)
            {
                noiseMapScale = 1;
            }

            int originalWidth = mapWidth;
            int originalHeight = mapHeight;

            mapWidth = Mathf.FloorToInt(originalWidth * noiseMapScale);
            mapHeight = Mathf.FloorToInt(originalHeight * noiseMapScale);

            float[,] noiseMap = new float[mapWidth, mapHeight];

            if (scale <= 0)
            {
                scale = 0.0001f;
            }

            int offsetX = Random.Range(0, mapWidth - originalWidth);
            int offsetY = Random.Range(0, mapHeight - originalHeight);


            for (int x = 0 + offsetX; x < offsetX + originalWidth; x++)
            {
                for (int y = 0 + offsetY; y < offsetY + originalHeight; y++)
                {
                    //print("NoiseMap : " + mapWidth +"x" + mapHeight+"\n"+
                    //    "Looking at X:" + x + " Y:" + y);
                    float sampleX = x / scale;
                    float sampleY = y / scale;

                    float perlinValue = Mathf.PerlinNoise(sampleX, sampleY);


                    noiseMap[x - offsetX, y - offsetY] = perlinValue;
                }
            }

            return noiseMap;
        }

        /// <summary>
        /// Returns a 2-dimensional array of noise values picked randomly 
        /// from a noisemap generated by the given parameters. 
        /// If safemode is TRUE, all values will be within 0-1 and never stray above or below.
        /// </summary>
        /// <param name="mapWidth">The array width.</param>
        /// <param name="mapHeight">The array height.</param>
        /// <param name="scale">The scale of the noise.</param>
        /// <param name="noiseMapScale">The noise map scale factor.</param>
        /// <param name="safemode">Safemode or not.</param>
        /// <returns>2-dimensional array of noise values</returns>
        public static float[,] MakeNoiseMap(int mapWidth, int mapHeight, float scale, float noiseMapScale, bool safemode)
        {
            if (noiseMapScale < 1)
            {
                noiseMapScale = 1;
            }

            int originalWidth = mapWidth;
            int originalHeight = mapHeight;

            mapWidth = Mathf.FloorToInt(originalWidth * noiseMapScale);
            mapHeight = Mathf.FloorToInt(originalHeight * noiseMapScale);

            float[,] noiseMap = new float[mapWidth, mapHeight];

            if (scale <= 0)
            {
                scale = 0.0001f;
            }

            int offsetX = Random.Range(0, mapWidth - originalWidth);
            int offsetY = Random.Range(0, mapHeight - originalHeight);


            for (int x = 0 + offsetX; x < offsetX + originalWidth; x++)
            {
                for (int y = 0 + offsetY; y < offsetY + originalHeight; y++)
                {
                    //print("NoiseMap : " + mapWidth +"x" + mapHeight+"\n"+
                    //    "Looking at X:" + x + " Y:" + y);
                    float sampleX = x / scale;
                    float sampleY = y / scale;

                    float perlinValue = Mathf.PerlinNoise(sampleX, sampleY);
                    if (safemode)
                    {
                        if (perlinValue < 0)
                        {
                            perlinValue = 0;
                        }
                        if (perlinValue > 1)
                        {
                            perlinValue = 1;
                        }
                    }

                    noiseMap[x - offsetX, y - offsetY] = perlinValue;
                }
            }

            return noiseMap;
        }

        /// <summary>
        /// Returns a capped off perlin noise values to avoid having to handle cases for values above 1 and below 0.
        /// </summary>
        /// <param name="noise">The perlin noise you wish the cap off</param>
        /// <returns>The capped off perlin noise</returns>
        public static float CapNoise(float noise)
        {
            if (noise < 0)
            {
                noise = 0;
            }
            if (noise > 1)
            {
                noise = 1;
            }
            return noise;
        }

    }

}